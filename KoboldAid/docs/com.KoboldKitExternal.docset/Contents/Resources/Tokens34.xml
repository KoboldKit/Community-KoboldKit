<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/OpenALManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/OpenALManager</TokenIdentifier>
			<Abstract type="html">Manager class for OpenAL objects (ObjectAL).
Keeps track of devices that have been opened, and allows high level OpenAL management. <br>
Provides methods for loading ALBuffer objects from audio files. <br>
The OpenAL 1.1 specification is available at
http://connect.creativelabs.com/openal/Documentation <br>
Be sure to read through it (especially the part about distance models) as ObjectAL follows the
OpenAL object model. <br></Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>
			
			<NodeRef refid="34"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setAvailableDevices:</TokenIdentifier>
			<Abstract type="html">List of available playback devices (NSString*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *availableDevices</Declaration>
			
			
			<Anchor>//api/name/availableDevices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/availableDevices</TokenIdentifier>
			<Abstract type="html">List of available playback devices (NSString*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *availableDevices</Declaration>
			
			
			<Anchor>//api/name/availableDevices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/availableDevices</TokenIdentifier>
			<Abstract type="html">List of available playback devices (NSString*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *availableDevices</Declaration>
			
			
			<Anchor>//api/name/availableDevices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setAvailableCaptureDevices:</TokenIdentifier>
			<Abstract type="html">List of available capture devices (NSString*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *availableCaptureDevices</Declaration>
			
			
			<Anchor>//api/name/availableCaptureDevices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/availableCaptureDevices</TokenIdentifier>
			<Abstract type="html">List of available capture devices (NSString*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *availableCaptureDevices</Declaration>
			
			
			<Anchor>//api/name/availableCaptureDevices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/availableCaptureDevices</TokenIdentifier>
			<Abstract type="html">List of available capture devices (NSString*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *availableCaptureDevices</Declaration>
			
			
			<Anchor>//api/name/availableCaptureDevices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setCurrentContext:</TokenIdentifier>
			<Abstract type="html">The current context (some context operations require the context to be the "current" one).
WEAK reference.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALContext *currentContext</Declaration>
			
			
			<Anchor>//api/name/currentContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/currentContext</TokenIdentifier>
			<Abstract type="html">The current context (some context operations require the context to be the "current" one).
WEAK reference.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALContext *currentContext</Declaration>
			
			
			<Anchor>//api/name/currentContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/currentContext</TokenIdentifier>
			<Abstract type="html">The current context (some context operations require the context to be the "current" one).
WEAK reference.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALContext *currentContext</Declaration>
			
			
			<Anchor>//api/name/currentContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setDefaultCaptureDeviceSpecifier:</TokenIdentifier>
			<Abstract type="html">Name of the default capture device.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSString *defaultCaptureDeviceSpecifier</Declaration>
			
			
			<Anchor>//api/name/defaultCaptureDeviceSpecifier</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/defaultCaptureDeviceSpecifier</TokenIdentifier>
			<Abstract type="html">Name of the default capture device.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSString *defaultCaptureDeviceSpecifier</Declaration>
			
			
			<Anchor>//api/name/defaultCaptureDeviceSpecifier</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/defaultCaptureDeviceSpecifier</TokenIdentifier>
			<Abstract type="html">Name of the default capture device.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSString *defaultCaptureDeviceSpecifier</Declaration>
			
			
			<Anchor>//api/name/defaultCaptureDeviceSpecifier</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setDefaultDeviceSpecifier:</TokenIdentifier>
			<Abstract type="html">Name of the default playback device.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSString *defaultDeviceSpecifier</Declaration>
			
			
			<Anchor>//api/name/defaultDeviceSpecifier</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/defaultDeviceSpecifier</TokenIdentifier>
			<Abstract type="html">Name of the default playback device.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSString *defaultDeviceSpecifier</Declaration>
			
			
			<Anchor>//api/name/defaultDeviceSpecifier</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/defaultDeviceSpecifier</TokenIdentifier>
			<Abstract type="html">Name of the default playback device.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSString *defaultDeviceSpecifier</Declaration>
			
			
			<Anchor>//api/name/defaultDeviceSpecifier</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setDevices:</TokenIdentifier>
			<Abstract type="html">List of all open devices (ALDevice*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *devices</Declaration>
			
			
			<Anchor>//api/name/devices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/devices</TokenIdentifier>
			<Abstract type="html">List of all open devices (ALDevice*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *devices</Declaration>
			
			
			<Anchor>//api/name/devices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/devices</TokenIdentifier>
			<Abstract type="html">List of all open devices (ALDevice*).</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) NSArray *devices</Declaration>
			
			
			<Anchor>//api/name/devices</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setMixerOutputFrequency:</TokenIdentifier>
			<Abstract type="html">The frequency of the output mixer.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALdouble mixerOutputFrequency</Declaration>
			
			
			<Anchor>//api/name/mixerOutputFrequency</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/mixerOutputFrequency</TokenIdentifier>
			<Abstract type="html">The frequency of the output mixer.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALdouble mixerOutputFrequency</Declaration>
			
			
			<Anchor>//api/name/mixerOutputFrequency</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/mixerOutputFrequency</TokenIdentifier>
			<Abstract type="html">The frequency of the output mixer.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALdouble mixerOutputFrequency</Declaration>
			
			
			<Anchor>//api/name/mixerOutputFrequency</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setRenderingQuality:</TokenIdentifier>
			<Abstract type="html">The rendering quality.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALint renderingQuality</Declaration>
			
			
			<Anchor>//api/name/renderingQuality</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/renderingQuality</TokenIdentifier>
			<Abstract type="html">The rendering quality.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALint renderingQuality</Declaration>
			
			
			<Anchor>//api/name/renderingQuality</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/renderingQuality</TokenIdentifier>
			<Abstract type="html">The rendering quality.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALint renderingQuality</Declaration>
			
			
			<Anchor>//api/name/renderingQuality</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/bufferFromFile:</TokenIdentifier>
			<Abstract type="html">Load an OpenAL buffer with the contents of an audio file.
The buffer's name will be the fully qualified URL of the path.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (ALBuffer *)bufferFromFile:(NSString *)filePath</Declaration>
			<Parameters>
				<Parameter>
					<Name>filePath</Name>
					<Abstract type="html">The path of the file containing the audio data.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An ALBuffer containing the audio data.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferFromFile:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/bufferFromFile:reduceToMono:</TokenIdentifier>
			<Abstract type="html">Load an OpenAL buffer with the contents of an audio file.
The buffer's name will be the fully qualified URL of the path.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (ALBuffer *)bufferFromFile:(NSString *)filePath reduceToMono:(bool)reduceToMono</Declaration>
			<Parameters>
				<Parameter>
					<Name>filePath</Name>
					<Abstract type="html">The path of the file containing the audio data.</Abstract>
				</Parameter><Parameter>
					<Name>reduceToMono</Name>
					<Abstract type="html">If true, reduce the sample to mono
(stereo samples don't support panning or positional audio).</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An ALBuffer containing the audio data.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferFromFile:reduceToMono:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/bufferFromUrl:</TokenIdentifier>
			<Abstract type="html">Load an OpenAL buffer with the contents of an audio file.
The buffer's name will be the fully qualified URL.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (ALBuffer *)bufferFromUrl:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the file containing the audio data.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An ALBuffer containing the audio data.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferFromUrl:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/bufferFromUrl:reduceToMono:</TokenIdentifier>
			<Abstract type="html">Load an OpenAL buffer with the contents of an audio file.
The buffer's name will be the fully qualified URL.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (ALBuffer *)bufferFromUrl:(NSURL *)url reduceToMono:(bool)reduceToMono</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the file containing the audio data.</Abstract>
				</Parameter><Parameter>
					<Name>reduceToMono</Name>
					<Abstract type="html">If true, reduce the sample to mono
(stereo samples don't support panning or positional audio).</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An ALBuffer containing the audio data.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferFromUrl:reduceToMono:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/bufferAsyncFromFile:target:selector:</TokenIdentifier>
			<Abstract type="html">Load an OpenAL buffer with the contents of an audio file asynchronously.
This method will schedule a request to have the buffer created and filled, and then call the
specified selector with the newly created buffer. <br>
The buffer's name will be the fully qualified URL of the path. <br>
Returns the fully qualified URL of the path, which you can match up to the buffer name in your
callback method.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (NSString *)bufferAsyncFromFile:(NSString *)filePath target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>filePath</Name>
					<Abstract type="html">The path of the file containing the audio data.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The target to call when the buffer is loaded.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to invoke when the buffer is loaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The fully qualified URL of the path.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferAsyncFromFile:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/bufferAsyncFromFile:reduceToMono:target:selector:</TokenIdentifier>
			<Abstract type="html">Load an OpenAL buffer with the contents of an audio file asynchronously.
This method will schedule a request to have the buffer created and filled, and then call the
specified selector with the newly created buffer. <br>
The buffer's name will be the fully qualified URL of the path. <br>
Returns the fully qualified URL of the path, which you can match up to the buffer name in your
callback method.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (NSString *)bufferAsyncFromFile:(NSString *)filePath reduceToMono:(bool)reduceToMono target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>filePath</Name>
					<Abstract type="html">The path of the file containing the audio data.</Abstract>
				</Parameter><Parameter>
					<Name>reduceToMono</Name>
					<Abstract type="html">If true, reduce the sample to mono
(stereo samples don't support panning or positional audio).</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The target to call when the buffer is loaded.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to invoke when the buffer is loaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The fully qualified URL of the path.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferAsyncFromFile:reduceToMono:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/bufferAsyncFromUrl:target:selector:</TokenIdentifier>
			<Abstract type="html">Load an OpenAL buffer with the contents of a URL asynchronously.
This method will schedule a request to have the buffer created and filled, and then call the
specified selector with the newly created buffer. <br>
The buffer's name will be the fully qualified URL. <br>
Returns the fully qualified URL, which you can match up to the buffer name in your callback
method.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (NSString *)bufferAsyncFromUrl:(NSURL *)url target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the file containing the audio data.</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The target to call when the buffer is loaded.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to invoke when the buffer is loaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The fully qualified URL of the path.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferAsyncFromUrl:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/bufferAsyncFromUrl:reduceToMono:target:selector:</TokenIdentifier>
			<Abstract type="html">Load an OpenAL buffer with the contents of a URL asynchronously.
This method will schedule a request to have the buffer created and filled, and then call the
specified selector with the newly created buffer. <br>
The buffer's name will be the fully qualified URL. <br>
Returns the fully qualified URL, which you can match up to the buffer name in your callback
method.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (NSString *)bufferAsyncFromUrl:(NSURL *)url reduceToMono:(bool)reduceToMono target:(id)target selector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the file containing the audio data.</Abstract>
				</Parameter><Parameter>
					<Name>reduceToMono</Name>
					<Abstract type="html">If true, reduce the sample to mono
(stereo samples don't support panning or positional audio).</Abstract>
				</Parameter><Parameter>
					<Name>target</Name>
					<Abstract type="html">The target to call when the buffer is loaded.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">The selector to invoke when the buffer is loaded.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The fully qualified URL of the path.</Abstract></ReturnValue>
			<Anchor>//api/name/bufferAsyncFromUrl:reduceToMono:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/clearAllBuffers</TokenIdentifier>
			<Abstract type="html">Clear all references to sound data from ALL buffers, managed or not.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (void)clearAllBuffers</Declaration>
			
			
			<Anchor>//api/name/clearAllBuffers</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/notifyDeviceInitializing:</TokenIdentifier>
			<Abstract type="html">(INTERNAL USE) Notify that a device is initializing.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (void)notifyDeviceInitializing:(ALDevice *)device</Declaration>
			
			
			<Anchor>//api/name/notifyDeviceInitializing:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/notifyDeviceDeallocating:</TokenIdentifier>
			<Abstract type="html">(INTERNAL USE) Notify that a device is deallocating.</Abstract>
			<DeclaredIn>OpenALManager.h</DeclaredIn>			
			
			<Declaration>- (void)notifyDeviceDeallocating:(ALDevice *)device</Declaration>
			
			
			<Anchor>//api/name/notifyDeviceDeallocating:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/addSuspendListener:</TokenIdentifier>
			<Abstract type="html">Add a listener that will receive manual suspend and interrupt events.</Abstract>
			<DeclaredIn>OpenALManager.m</DeclaredIn>			
			
			<Declaration>- (void)addSuspendListener:(id&lt;OALSuspendListener&gt;)listener</Declaration>
			<Parameters>
				<Parameter>
					<Name>listener</Name>
					<Abstract type="html">The listener to register with this handler.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addSuspendListener:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/removeSuspendListener:</TokenIdentifier>
			<Abstract type="html">Remove a registered listener.</Abstract>
			<DeclaredIn>OpenALManager.m</DeclaredIn>			
			
			<Declaration>- (void)removeSuspendListener:(id&lt;OALSuspendListener&gt;)listener</Declaration>
			<Parameters>
				<Parameter>
					<Name>listener</Name>
					<Abstract type="html">The listener to unregister from this handler.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSuspendListener:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/suspended</TokenIdentifier>
			<Abstract type="html">If YES, this object is suspended.</Abstract>
			<DeclaredIn>OpenALManager.m</DeclaredIn>			
			
			<Declaration>- (bool)suspended</Declaration>
			
			
			<Anchor>//api/name/suspended</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setSuspended:</TokenIdentifier>
			<Abstract type="html">(INTERNAL USE) Called by SuspendHandler.</Abstract>
			<DeclaredIn>OpenALManager.m</DeclaredIn>			
			
			<Declaration>- (void)setSuspended:(bool)value</Declaration>
			
			
			<Anchor>//api/name/setSuspended:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/setRealCurrentContext:</TokenIdentifier>
			<Abstract type="html">(INTERNAL USE) Real reference to the current context.</Abstract>
			<DeclaredIn>OpenALManager.m</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALContext *realCurrentContext</Declaration>
			
			
			<Anchor>//api/name/realCurrentContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/OpenALManager/realCurrentContext</TokenIdentifier>
			<Abstract type="html">(INTERNAL USE) Real reference to the current context.</Abstract>
			<DeclaredIn>OpenALManager.m</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALContext *realCurrentContext</Declaration>
			
			
			<Anchor>//api/name/realCurrentContext</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/OpenALManager/realCurrentContext</TokenIdentifier>
			<Abstract type="html">(INTERNAL USE) Real reference to the current context.</Abstract>
			<DeclaredIn>OpenALManager.m</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) ALContext *realCurrentContext</Declaration>
			
			
			<Anchor>//api/name/realCurrentContext</Anchor>
		</Token>
		
	</File>
</Tokens>