<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSString+KoboldKit.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSString(KoboldKit)</TokenIdentifier>
			<Abstract type="html">NSString category methods</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>
			
			<NodeRef refid="53"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/rectValue</TokenIdentifier>
			<Abstract type="html">A CGRect converted from a string rect representation like "{{10, 20}, {300, 400}}".</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (CGRect)rectValue</Declaration>
			
			<ReturnValue><Abstract type="html">A CGRect converted from a string rect representation like "{{10, 20}, {300, 400}}".</Abstract></ReturnValue>
			<Anchor>//api/name/rectValue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/sizeValue</TokenIdentifier>
			<Abstract type="html">A CGSize converted from a string size representation like "{10, 20}".</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (CGSize)sizeValue</Declaration>
			
			<ReturnValue><Abstract type="html">A CGSize converted from a string size representation like "{10, 20}".</Abstract></ReturnValue>
			<Anchor>//api/name/sizeValue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/pointValue</TokenIdentifier>
			<Abstract type="html">A CGPoint converted from a string point representation like "{300, 400}".</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)pointValue</Declaration>
			
			<ReturnValue><Abstract type="html">A CGPoint converted from a string point representation like "{300, 400}".</Abstract></ReturnValue>
			<Anchor>//api/name/pointValue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/color</TokenIdentifier>
			<Abstract type="html">String converted to SKColor object. The string must be in the form "1.0 1.0 1.0 1.0" where the
values stand for the RGBA color values in the same order.</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (SKColor *)color</Declaration>
			
			<ReturnValue><Abstract type="html">String converted to SKColor object. The string must be in the form "1.0 1.0 1.0 1.0" where the
values stand for the RGBA color values in the same order.</Abstract></ReturnValue>
			<Anchor>//api/name/color</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSString(KoboldKit)/containsString:</TokenIdentifier>
			<Abstract type="html">Performs a case sensitive search for a substring. Returns YES if the string contains the substring.</Abstract>
			<DeclaredIn>NSString+KoboldKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)containsString:(NSString *)subString</Declaration>
			<Parameters>
				<Parameter>
					<Name>subString</Name>
					<Abstract type="html">The sub string to search for.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the subString is contained in the string.</Abstract></ReturnValue>
			<Anchor>//api/name/containsString:</Anchor>
		</Token>
		
	</File>
</Tokens>